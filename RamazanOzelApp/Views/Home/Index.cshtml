@{
    ViewData["Title"] = "Home Page";
}

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<style>
    #map {
        width: 100%;
        height: 600px;
    }

    .leaflet-popup-content-wrapper {
        width: 500px;
        max-width: 100%;
    }

    .imsakiye-container {
        display: flex;
        flex-wrap: wrap; /* Öğeleri sarmaya izin verir */
        width: 1000px;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }

    .imsakiye-card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 10px;
        margin: 10px;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        width: 120px;
        text-align: center;
        background-color: #fff;
        flex: 0 0 45%; /* Her kartın %45 genişlik almasını sağla */
        box-sizing: border-box; /* Padding ve margin'in box modeline dahil edilmesini sağlar */
    }

        .imsakiye-card .title {
            font-weight: bold;
            font-size: 14px;
            margin-bottom: 5px;
        }

        .imsakiye-card .time {
            font-size: 12px;
        }

        .imsakiye-card.active {
            background-color: #f39c12;
            color: #fff;
        }

        .imsakiye-card .countdown {
            font-size: 12px;
            color: red;
            font-weight: bold;
        }

            .imsakiye-card .countdown.active {
                color: #fff;
            }

</style>

<div id="map"></div>

<script>

    var map = L.map('map').setView([39, 35], 6);
    var cityName;

    // Harita Yükleme
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {}).addTo(map);

    // Türkiye şehirlerinin GeoJSON verisi
    fetch("https://raw.githubusercontent.com/cihadturhan/tr-geojson/master/geo/tr-cities-utf8.json")
        .then(response => response.json())
        .then(data => {
            L.geoJSON(data, {
                style: function (feature) {
                    return { color: "orangered", weight: 2, fillOpacity: 0.3 };
                },
                onEachFeature: function (feature, layer) {
                    var cityName = feature.properties.name;
                    layer.on('click', function () {
                        fetchImsakiye(cityName);
                    });
                }
            }).addTo(map);
        })
        .catch(error => console.error("GeoJSON yüklenemedi:", error));

    // İmsakiye bilgilerini API'den çekme
    function fetchImsakiye(city) {
        const url = `https://api.aladhan.com/v1/timingsByCity?city=${city}&country=Turkey`;
        fetch(url)
            .then(response => response.json())
            .then(data => {
                if (data.code === 200) {
                    const timings = data.data.timings;
                    showImsakiyePopup(city, timings);
                } else {
                    alert("İmsakiye bilgisi alınamadı.");
                }
            })
            .catch(error => console.error('API hatası:', error));
    }


    // Popup içinde imsakiye bilgilerini kartlar olarak gösterme
    function showImsakiyePopup(city, timings) {
        var currentTime = new Date();
        var formattedDate = currentTime.toLocaleString('tr-TR', {
            day: '2-digit', month: '2-digit', year: 'numeric',
            hour: '2-digit', minute: '2-digit', second: '2-digit'
        });

        // Vakitler
        var imsakiyeInfo = `
                <h3>${city} Ramazan İmsakiyesi</h3>
                <h4>${formattedDate}</h4>
                <div class="imsakiye-container">
                    <div class="imsakiye-card ${isActive(timings.Fajr)}">
                        <div class="title">İmsak</div>
                        <div class="time">${timings.Fajr}</div>
                    </div>
                    <div class="imsakiye-card ${isActive(timings.Sunrise)}">
                        <div class="title">Güneş</div>
                        <div class="time">${timings.Sunrise}</div>
                    </div>
                    <div class="imsakiye-card ${isActive(timings.Dhuhr)}">
                        <div class="title">Öğle</div>
                        <div class="time">${timings.Dhuhr}</div>
                    </div>
                    <div class="imsakiye-card ${isActive(timings.Asr)}">
                        <div class="title">İkindi</div>
                        <div class="time">${timings.Asr}</div>
                    </div>
                    <div class="imsakiye-card ${isActive(timings.Maghrib)}">
                        <div class="title">Akşam</div>
                        <div class="time">${timings.Maghrib}</div>
                    </div>
                    <div class="imsakiye-card ${isActive(timings.Isha)}">
                        <div class="title">Yatsı</div>
                        <div class="time">${timings.Isha}</div>
                    </div>
                    <div class="imsakiye-card countdown-card">
                        <div class="title">İftar Kalan</div>
                        <div class="countdown" id="countdown"></div>
                    </div>
                </div>
        `;

        // Popup'ı aç
        var popup = L.popup()
            .setLatLng([39, 35])
            .setContent(imsakiyeInfo)
            .openOn(map);

        // Sayaç başlat
        startCountdown(timings.Maghrib);
    }

    // En yakın vakti aktif yapmak
    function isActive(vakit) {
        var currentTime = new Date();
        var vakitTime = new Date(`2025-03-21T${vakit}:00`);

        if (vakitTime > currentTime) {
            return '';
        } else if (vakitTime.getTime() === currentTime.getTime()) {
            return 'active';
        }
        return '';
    }

    // Sayaç fonksiyonu
    function startCountdown(iftarTime) {
        var countdownElement = document.getElementById('countdown');

        function updateCountdown() {
            var currentTime = new Date();
            var iftar = new Date(`2025-03-21T${iftarTime}:00`);

            var timeDiff = iftar - currentTime;
            if (timeDiff <= 0) {
                countdownElement.innerHTML = "İftar Vakti!";
                clearInterval(countdownInterval);
            } else {
                var hours = Math.floor(timeDiff / (1000 * 60 * 60));
                var minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
                var seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);

                countdownElement.innerHTML = `${hours}:${minutes}:${seconds}`;
            }
        }

        updateCountdown();
        var countdownInterval = setInterval(updateCountdown, 1000);
    }
</script>